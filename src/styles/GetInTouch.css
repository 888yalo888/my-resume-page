.get-in-touch-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.get-in-touch-form input,
.get-in-touch-form textarea {
    display: block;
    /* min-width: 500px; */
    width: 340px;
    line-height: 24px;
    background-color: #f8f2f0;
    border: 1px solid #000;
    font-family: inherit;
    font-size: 15px;
    padding: 15px;
}

.grow-wrap {
    display: grid;
    /* min-width: 500px;
    max-width: 500px; */
    min-height: 80px;
}
.grow-wrap::after {
    content: attr(data-replicated-value) ' ';
    white-space: pre-wrap;
    visibility: hidden;
}
.grow-wrap > textarea {
    resize: none;
    overflow: hidden;
}

.get-in-touch-form input:focus,
.get-in-touch-form textarea:focus {
    outline: none !important;
    border: 1px solid #ee7968;
}

.get-in-touch-form textarea {
    /* min-width: 500px; */
    min-height: 80px;
    field-sizing: content;
}

/* .recaptcha {
    margin-bottom: 10px;
} */

.submit-button {
    width: 120px;
    height: 45px;
    margin-bottom: 22px;
    background-color: #e8604c;
    border: 1px solid transparent;
    cursor: pointer;
    color: #fff;
    font-size: 16px;
    font-weight: 600;
}

.submit-button:disabled {
    /* Styles for disabled button */
    background-color: gray;
    cursor: not-allowed;
}

.form-icon-container {
    display: flex;
    align-items: baseline;
}

.form-icon {
    flex-shrink: 0;
    position: relative;
    right: 30px;
    /* fill: #ee7968; */
}

.get-in-touch-form > div:focus-within > svg {
    fill: #ee7968;
}

@media (max-width: 768px) {
    .get-in-touch-form input {
        /* min-width: auto; */
        width: 340px;
    }

    .message {
        max-width: 340px;
    }

    .get-in-touch-form textarea {
        width: 293px;
    }
}

/* @media (max-width: 1000px) {
    .get-in-touch-form input,
    .get-in-touch-form textarea {
        width: 450px;
    }
} */

.button-recaptcha-container {
    display: flex;
    flex-direction: column;
}

.submit-message {
    width: 400px;
    height: 30px;
    color: #ee7968;
    opacity: 1;
    animation: fadeOut 3s forwards;
}

@keyframes fadeOut {
    0% {
        opacity: 1;
    }
    66% {
        opacity: 1;
    }
    100% {
        opacity: 0;
    }
}

.button-message-container {
    display: flex;
    gap: 100px;
}

.error-message {
    width: 300px;
    height: 30px;
    font-size: small;
    color: red;
    border-color: red;
}
/* .phone-country-container {
    position: absolute;
    width: 500px;
}
.PhoneInputInput {
    height: 0px;
    margin-top: 50px;
} */

/* CSS variables. */
:root {
    --PhoneInput-color--focus: #03b2cb;
    --PhoneInputInternationalIconPhone-opacity: 0.8;
    --PhoneInputInternationalIconGlobe-opacity: 0.65;
    --PhoneInputCountrySelect-marginRight: 0.35em;
    --PhoneInputCountrySelectArrow-width: 0.3em;
    --PhoneInputCountrySelectArrow-marginLeft: var(
        --PhoneInputCountrySelect-marginRight
    );
    --PhoneInputCountrySelectArrow-borderWidth: 1px;
    --PhoneInputCountrySelectArrow-opacity: 0.45;
    --PhoneInputCountrySelectArrow-color: currentColor;
    --PhoneInputCountrySelectArrow-color--focus: var(--PhoneInput-color--focus);
    --PhoneInputCountrySelectArrow-transform: rotate(45deg);
    --PhoneInputCountryFlag-aspectRatio: 1.5;
    --PhoneInputCountryFlag-height: 1em;
    --PhoneInputCountryFlag-borderWidth: 1px;
    --PhoneInputCountryFlag-borderColor: rgba(0, 0, 0, 0.5);
    --PhoneInputCountryFlag-borderColor--focus: var(--PhoneInput-color--focus);
    --PhoneInputCountryFlag-backgroundColor--loading: rgba(0, 0, 0, 0.1);
}

.PhoneInput {
    /* This is done to stretch the contents of this component. */
    display: flex;
    width: 60%;
    position: relative;
}

.PhoneInputInput {
    /* The phone number input stretches to fill all empty space */
    flex: 1;
    /* The phone number input should shrink
	   to make room for the extension input */
    min-width: 0;
}

.PhoneInputCountryIcon {
    width: calc(
        var(--PhoneInputCountryFlag-height) *
            var(--PhoneInputCountryFlag-aspectRatio)
    );
    height: var(--PhoneInputCountryFlag-height);
}

.PhoneInputCountryIcon--square {
    width: var(--PhoneInputCountryFlag-height);
}

.PhoneInputCountryIcon--border {
    /* Removed `background-color` because when an `<img/>` was still loading
	   it would show a dark gray rectangle. */
    /* For some reason the `<img/>` is not stretched to 100% width and height
	   and sometime there can be seen white pixels of the background at top and bottom. */
    background-color: var(--PhoneInputCountryFlag-backgroundColor--loading);
    /* Border is added via `box-shadow` because `border` interferes with `width`/`height`. */
    /* For some reason the `<img/>` is not stretched to 100% width and height
	   and sometime there can be seen white pixels of the background at top and bottom,
	   so an additional "inset" border is added. */
    box-shadow:
        0 0 0 var(--PhoneInputCountryFlag-borderWidth)
            var(--PhoneInputCountryFlag-borderColor),
        inset 0 0 0 var(--PhoneInputCountryFlag-borderWidth)
            var(--PhoneInputCountryFlag-borderColor);
}

.PhoneInputCountryIconImg {
    /* Fixes weird vertical space above the flag icon. */
    /* https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/7#note_348586559 */
    display: block;
    /* 3rd party <SVG/> flag icons won't stretch if they have `width` and `height`.
	   Also, if an <SVG/> icon's aspect ratio was different, it wouldn't fit too. */
    width: 100%;
    height: 100%;
}

.PhoneInputInternationalIconPhone {
    opacity: var(--PhoneInputInternationalIconPhone-opacity);
}

.PhoneInputInternationalIconGlobe {
    opacity: var(--PhoneInputInternationalIconGlobe-opacity);
}

/* Styling native country `<select/>`. */

.PhoneInputCountry {
    right: 0;
    z-index: 1;
    position: absolute;
    align-self: stretch;
    display: flex;
    align-items: center;
    margin-right: 6px;
    margin-top: 16px;
    /* margin-right: var(--PhoneInputCountrySelect-marginRight); */
}

.PhoneInputCountrySelect {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: 1;
    border: 0;
    opacity: 0;
    cursor: pointer;
}

.PhoneInputCountrySelect[disabled],
.PhoneInputCountrySelect[readonly] {
    cursor: default;
}

.PhoneInputCountrySelectArrow {
    display: block;
    content: '';
    width: var(--PhoneInputCountrySelectArrow-width);
    height: var(--PhoneInputCountrySelectArrow-width);
    margin-left: var(--PhoneInputCountrySelectArrow-marginLeft);
    border-style: solid;
    border-color: var(--PhoneInputCountrySelectArrow-color);
    border-top-width: 0;
    border-bottom-width: var(--PhoneInputCountrySelectArrow-borderWidth);
    border-left-width: 0;
    border-right-width: var(--PhoneInputCountrySelectArrow-borderWidth);
    transform: var(--PhoneInputCountrySelectArrow-transform);
    opacity: var(--PhoneInputCountrySelectArrow-opacity);
}

.PhoneInputCountrySelect:focus
    + .PhoneInputCountryIcon
    + .PhoneInputCountrySelectArrow {
    opacity: 1;
    color: var(--PhoneInputCountrySelectArrow-color--focus);
}

.PhoneInputCountrySelect:focus + .PhoneInputCountryIcon--border {
    box-shadow:
        0 0 0 var(--PhoneInputCountryFlag-borderWidth)
            var(--PhoneInputCountryFlag-borderColor--focus),
        inset 0 0 0 var(--PhoneInputCountryFlag-borderWidth)
            var(--PhoneInputCountryFlag-borderColor--focus);
}

.PhoneInputCountrySelect:focus
    + .PhoneInputCountryIcon
    .PhoneInputInternationalIconGlobe {
    opacity: 1;
    color: var(--PhoneInputCountrySelectArrow-color--focus);
}
